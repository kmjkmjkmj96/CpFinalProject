<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">


	<select id="getChatMembers" resultType="com.workly.final_project.member.model.dto.MemberDeptPositionDTO">
	    SELECT 
	        M.USER_NO AS userNo,
	        M.USER_NAME AS userName,
	        D.DEPT_NAME AS deptName,
	        P.POSITION_NAME AS positionName
	        
	    FROM MEMBER M
	    JOIN DEPARTMENT D ON M.DEPT_NO = D.DEPT_NO
	    JOIN POSITION P ON M.POSITION_NO = P.POSITION_NO
	</select>

	
	<insert id="addFavorite" parameterType="com.workly.final_project.chat.model.dto.FavoriteDTO">
	    MERGE INTO CHAT_FAVORITE_USER T
	    USING (SELECT #{userNo} AS USER_NO, #{favoriteNo} AS FAVORITE_NO FROM DUAL) S
	    ON (T.USER_NO = S.USER_NO AND T.FAVORITE_NO = S.FAVORITE_NO)
	    WHEN NOT MATCHED THEN
	        INSERT (USER_NO, FAVORITE_NO) VALUES (S.USER_NO, S.FAVORITE_NO)
	</insert>

	
	<select id="getFavoriteList" parameterType="int" resultType="com.workly.final_project.member.model.dto.MemberDeptPositionDTO">
	    SELECT 
	        M.USER_NO AS userNo,
	        M.USER_NAME AS userName,
	        D.DEPT_NAME AS deptName,
	        P.POSITION_NAME AS positionName
	    FROM CHAT_FAVORITE_USER F
	    JOIN MEMBER M ON F.FAVORITE_NO = M.USER_NO
	    JOIN DEPARTMENT D ON M.DEPT_NO = D.DEPT_NO
	    JOIN POSITION P ON M.POSITION_NO = P.POSITION_NO
	    WHERE F.USER_NO = #{userNo}
	</select>

	
	<delete id="removeFavorite">
	 	DELETE FROM CHAT_FAVORITE_USER 
    	WHERE USER_NO = #{userNo} 
      	AND FAVORITE_NO = #{favoriteNo}
	</delete>


	<select id="searchMember" resultType="com.workly.final_project.member.model.dto.MemberDeptPositionDTO">
		SELECT 
	        M.USER_NO AS userNo,
	        M.USER_NAME AS userName,
	        D.DEPT_NAME AS deptName,
	        P.POSITION_NAME AS positionName
	    FROM MEMBER M
	    JOIN DEPARTMENT D ON M.DEPT_NO = D.DEPT_NO
	    JOIN POSITION P USING (POSITION_NO)
	    WHERE M.USER_NAME LIKE '%' || #{userName} || '%'
	</select>
	
	

	<!-- 채팅방 생성 -->
    <insert id="createChatRoom" parameterType="ChatRoom">
        <selectKey keyProperty="chatRoomNo" order="BEFORE" resultType="int">
            SELECT CHAT_ROOM_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        
        INSERT INTO CHAT_ROOM (CHAT_ROOM_NO, ROOM_TITLE, CREATED_CHAT, CHAT_TYPE)
        VALUES (#{chatRoomNo}, #{roomTitle}, SYSDATE, #{chatType})
    </insert>

    <!-- 채팅방 참여자 추가 -->
    <insert id="insertChatParticipant">
	    INSERT INTO CHAT_PARTICIPANT (CHAT_ROOM_NO, USER_NO, ENTER_DATE, BELL_SETTING)
	    SELECT #{chatRoomNo}, userNo, SYSDATE, 'Y'
	    FROM (
	        <foreach collection="userNos" item="userNo" separator=" UNION ALL ">
	            SELECT #{userNo} AS userNo FROM DUAL
	        </foreach>
	    )
	</insert>

	<!-- 채팅방 목록-->
	<select id="getChatList" resultType="chatDTO">
	    SELECT CR.CHAT_ROOM_NO,  
		       CR.ROOM_TITLE,
		       CR.CHAT_TYPE,
		       CR.CREATED_CHAT,
		       CP.BELL_SETTING,
		       C.RECEIVED_DATE AS LAST_MESSAGE_TIME,
		       (SELECT COUNT(*) 
		        FROM CHAT 
		        WHERE CHAT_ROOM_NO = CR.CHAT_ROOM_NO 
		          AND CHAT_NO > NVL(UC.LAST_READ_CHAT_NO, 0)
		       ) AS UNREAD_COUNT
		FROM CHAT_ROOM CR
		JOIN CHAT_PARTICIPANT CP ON CR.CHAT_ROOM_NO = CP.CHAT_ROOM_NO
		LEFT JOIN USER_CHAT UC ON CR.CHAT_ROOM_NO = UC.CHAT_ROOM_NO -- 컬럼명 확인 필수
		                      AND UC.USER_NO = #{userNo}
		LEFT JOIN CHAT C ON C.CHAT_ROOM_NO = CR.CHAT_ROOM_NO
		                AND C.RECEIVED_DATE = (SELECT MAX(RECEIVED_DATE) 
		                                       FROM CHAT 
		                                       WHERE CHAT_ROOM_NO = CR.CHAT_ROOM_NO)
		WHERE CP.USER_NO = #{userNo}
		ORDER BY CR.CREATED_CHAT DESC
	</select>

	<!--채팅 메세지 저장-->
	<insert id="saveChatMessage">
		<selectKey keyProperty="chatNo" order="BEFORE" resultType="int">
			SELECT CHAT_SEQ.NEXTVAL FROM DUAL
		</selectKey>	
		INSERT INTO CHAT (CHAT_NO, CHAT_ROOM_NO, MESSAGE, RECEIVED_DATE, USER_NO, USER_NAME)
		VALUES (#{chatNo}, #{chatRoomNo}, #{message}, SYSTIMESTAMP, #{userNo}, #{userName})
	</insert>
	
	<select id="getChatMessages" resultType="chat">
	    SELECT 
	        CHAT_NO AS chatNo,
	        CHAT_ROOM_NO AS chatRoomNo,
	        MESSAGE AS message,
	        RECEIVED_DATE AS receivedDate,
	        USER_NO AS userNo,  
	        USER_NAME AS userName  
	    FROM CHAT 
	    WHERE CHAT_ROOM_NO = #{chatRoomNo}
	    ORDER BY RECEIVED_DATE ASC
	</select>

	<!-- 채팅 참가자 쪽에서 userno 가져오기-->
	<select id="getUserNosByChatRoom" parameterType="int" resultType="int">
	    SELECT USER_NO FROM CHAT_PARTICIPANT WHERE CHAT_ROOM_NO = #{chatRoomNo}
	</select>

	


</mapper>










